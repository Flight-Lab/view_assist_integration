blueprint:
  name: View Assist - Alarms Reminders Timers
  description: Ask Assist to set an alarm, reminder, or timer  (View Assist alarmsreminderstimers v 1.0.0)
  domain: automation
  input:
    alarmsound_path:
      name: Alarm Sound Path
      description: The path to the sound file that will sound repeatedly when the timer expires
      default: "http://192.168.0.25:8123/local/viewassist/alarm1.mp3"
    snooze_time:
      name: Snooze Time
      description: The amount of time in minutes to wait after hitting snooze button before sounding alarm again
      default: "10"
    use_24hr:
      name: Use 24 hour time
      description: Set this to true for 24 hour time and false for am/pm display of time for notifications
      default: false
      selector:
        boolean:             
    view:
      name: View
      description: The View Assist dashboard view to use for displaying the notification and buttons to dismiss/snooze
      default: "/view-assist/alarm"
trigger:
  - platform: conversation
    command:
      - Set [an] alarm for {time}
      - set [a] timer for {when}
      - set [a] {when} timer
      - (set|start) [a|an] {name} timer for {when}      
    id: timer
  - platform: conversation
    command:
      - (remind me | set a reminder) to {reminder} at {time}
    id: setalarm
  - platform: conversation
    command:
      - >-
        remind me to {reminder} in {when} | set a reminder to {reminder} in
        {when} | remind me in {when} to {reminder}
      
    id: setalarm
  - platform: conversation
    command:
      - (Turn off | cancel | stop | snooze) alarm
    id: turnoffalarm    
  - event_type: va_timer_command_expired
    id: ringalarm
    trigger: event
    alias: When viewassist event timer expired fires
  - platform: conversation
    command:
      - how much time (is) left on my {name} timer
    id: timeremaining
  - platform: conversation
    command:
      - cancel my {name} timer
    id: canceltimer
  - platform: conversation
    command:
      - list my timers
    id: listtimer
  - alias: When SNOOZE button pressed
    event_type: viewassist
    trigger: event
    id: snoozealarm
    enabled: true
    event_data:
      command: snooze alarm
  - alias: When DISMISS button pressed
    event_type: viewassist
    trigger: event
    id: turnoffalarm
    enabled: true
    event_data:
      command: dismiss alarm    
condition: []
action:
  - action: view_assist.get_target_satellite
    data:
      device_id: "{{ trigger.device_id }}"
    response_variable: target_satellite
  - variables:
      target_satellite_device: "{{ target_satellite.target_satellite[0] }}"
      target_musicplayer_device: '{{ state_attr(target_satellite_device, ''musicplayer_device'')}}'
      target_mediaplayer_device: '{{ state_attr(target_satellite_device, ''mediaplayer_device'')}}'
      target_satellite_device_type: '{{ state_attr(target_satellite_device, ''type'')}}'
      alarmsound_path: !input alarmsound_path
      view: !input view
      snooze_time_input: !input snooze_time
      snooze_time: "{{ snooze_time_input | int }}"
      use_24hr: !input use_24hr
  - choose:
      - conditions:
          - condition: trigger
            id:
              - timer
        sequence:
          - action: view_assist.set_timer
            metadata: {}
            data:
              device_id: "{{ trigger.device_id }}"
              type: "{{ trigger.id }}"
              time: "{{ trigger.slots.when }}"
              name: "{{ trigger.slots.name }}"
            response_variable: timer_result
          - set_conversation_response: >-
              Timer set for {{ trigger.slots.when }}
      - conditions:
          - condition: trigger
            id:
              - ringalarm
        sequence:
          - variables:
              target_satellite_device: '{{ trigger.event.data.extra_info.view_assist_entity_id }}'
              target_display_device: '{{ state_attr(target_satellite_device, ''display_device'')}}'
              target_mediaplayer_device: '{{ state_attr(target_satellite_device, ''mediaplayer_device'')}}'
              alarm_type: "{{ trigger.event.data.timer_class }}"
              alarm_name: |-
                {% if trigger.event.data.name is defined %}
                  {{ trigger.event.data.name }}
                {% endif %}
              alarm_id: "{{ trigger.event.data.id }}"
              alarm_time: "{{ trigger.event.data.expires}}"
          - action: view_assist.set_state
            target:
              entity_id: '{{ target_satellite_device }}'
            data:              
              alarm: alarming
              mode: hold
              alarm_type: "{{ alarm_type }}"
              alarm_name: "{{ alarm_name }}"
          - action: view_assist.navigate
            data:
              device: "{{ target_satellite_device }}"
              path: "{{ view }}"            
          - action: view_assist.sound_alarm
            data:
              entity_id: "{{ target_mediaplayer_device }}"
              media_file: "{{ alarmsound_path }}"
      - conditions:
          - condition: trigger
            id:
              - turnoffalarm
        sequence:
          - variables:
              target_satellite_device: '{{ trigger.event.data.entity_id }}'
              target_display_device: >-
                {{ device_id(state_attr(target_satellite_device,
                'display_device')) }}
              target_mediaplayer_device: "{{ state_attr(target_satellite_device, 'mediaplayer_device') }}"
          - action: view_assist.set_state
            target:
              entity_id: '{{ target_satellite_device }}'
            data:
              alarm: >-
                {% if 'snooze' in trigger.sentence|lower %}snooze{% else
                %}idle{% endif %}
              mode: normal
          - action: view_assist.cancel_sound_alarm
            data:
              entity_id: "{{ target_mediaplayer_device }}"          
          - set_conversation_response: ""
      - conditions:
          - condition: trigger
            id:
              - timeremaining
        sequence:
          - action: view_assist.get_target_satellite
            data:
              device_id: "{{ trigger.device_id }}"
            response_variable: target_satellite
          - action: view_assist.get_timers
            data:
              device_id: "{{ trigger.device_id }}"
            response_variable: timer_info                    
          - variables:
              device_id: "{{ trigger.device_id }}"
              target_satellite_device: "{{ target_satellite.target_satellite[0] }}"
              target_satellite_device_type: "{{ state_attr(target_satellite_device, 'type')}}"
              timer_id: >-
                {% set timers = state_attr(target_satellite_device, 'timers') %}
                {% set search_name = trigger.slots.name %}
                {% for timer in timers %}
                  {% if search_name in timer.name or search_name in timer.extra_info.sentence %}
                    {{ timer.id }}
                  {% endif %}
                {% endfor %}
              timer: >-
                {% set timers = state_attr(target_satellite_device, 'timers') %}
                {% set search_name = timer_id %}
                {% set found_timer = {} %}
                {% for timer in timers %}
                  {% if search_name in timer.id %}
                    {% set found_timer = timer %}
                    {{ found_timer | list }}
                  {% endif %}
                {% endfor %}
              time_left: "{{ (timer_info['result'] | selectattr('id', '==', timer_id) | list)[0].expiry.text }}"
              time_expires: "{{ (timer_info['result'] | selectattr('id', '==', timer_id) | list)[0].expires }}"
              timer_name: "{{ (timer_info['result'] | selectattr('id', '==', timer_id) | list)[0].name }}"
          - set_conversation_response: >-
              You have {{ time_left }} on your {{ trigger.slots.name }} timer

          - action: view_assist.set_state
            target:
              entity_id: '{{ target_satellite_device }}'
            data:
              display_timer_expire: "{{ time_expires }}"
              display_timer_name: "{{ timer_name }}"
              message_font_size: 3vw 
          - action: view_assist.navigate
            data:
              device: "{{ target_satellite_device }}"
              path: "{{ view }}"               
      - conditions:
          - condition: trigger
            id:
              - canceltimer
        sequence:
          - action: view_assist.get_target_satellite
            data:
              device_id: "{{ trigger.device_id }}"
            response_variable: target_satellite
          - variables:
              device_id: "{{ trigger.device_id }}"
              target_satellite_device: "{{ target_satellite.target_satellite[0] }}"
              target_satellite_device_type: "{{ state_attr(target_satellite_device, 'type')}}"
              timer_id: >-
                {% set timers = state_attr(target_satellite_device, 'timers') %}
                {% set search_name = trigger.slots.name %}
                {% for timer in timers %}
                  {% if search_name in timer.name or search_name in timer.extra_info.sentence %}
                    {{ timer.id }}
                  {% endif %}
                {% endfor %}
          - if:
              - condition: template
                value_template: >-
                  {% if timer_id != '' %}true{% endif %}
            then:
              - set_conversation_response: Your {{ trigger.slots.name }} timer has been canceled
              - action: view_assist.cancel_timer
                data:
                  timer_id: "{{ timer_id }}"
              - variables:
                  message: >-
                    Your {{ trigger.slots.name }} timer has been canceled                                    
            else:
              - set_conversation_response: >-
                  I could not find an active timer called {{ trigger.slots.name }}
              - variables:
                  message: >-
                    I could not find an active timer called {{ trigger.slots.name }}       
          - if:
              - condition: template
                value_template: "{% if target_satellite_device_type != 'audio_only' %}true{% else %}false{% endif %}"
            then:

            #######  Message is not showing up on the view ????

              - action: view_assist.set_state
                target:
                  entity_id: '{{ target_satellite_device }}'
                data:
                  title: "Timers"
                  message: "{{ message }}"
                  message_font_size: 3vw 
              - action: view_assist.navigate
                data:
                  device: "{{ target_satellite_device }}"
                  path: "info"                
      - conditions:
          - condition: trigger
            id:
              - listtimer
        sequence:
          - action: view_assist.get_target_satellite
            data:
              device_id: "{{ trigger.device_id }}"
            response_variable: target_satellite
          - variables:
              device_id: "{{ trigger.device_id }}"
              target_satellite_device: "{{ target_satellite.target_satellite[0] }}"
              target_satellite_device_type: '{{ state_attr(target_satellite_device, ''type'')}}'
          - action: view_assist.get_timers
            data:
              device_id: "{{ device_id }}"
            response_variable: timer_info
          - variables:
              active_timers: "{{ timer_info['result'] | selectattr('status', '!=', 'expired') | list }}"
              count: "{{ active_timers | length }}"
          - set_conversation_response: >
              {% set active_timers = timer_info['result'] | selectattr('status', '!=', 'expired') | list %}
              {% set count = active_timers | length %}
              {% if count == 0 %}
              There are no active timers.
              {% else %}
              There {% if count == 1 %}is one active timer called {% else %}are {{ count }} active timers{% endif %}:
              {% for timer in active_timers %}
                {{ timer['name'] if timer['name'] else timer['extra_info']['sentence'] }} timer with {{ timer['expiry']['text'] }} remaining,
              {% endfor %}
              {% endif %}
          - if:
            - condition: template
              value_template: '{% if target_satellite_device_type != ''audio_only'' %}true{%
                else %}false{% endif %}'
            then:
            - variables:
                message: >-
                  {% set timer_info = state_attr(target_satellite_device, 'timers') %}
                  {% set active_timers = timer_info | selectattr('status', '!=', 'expired') | list %}
                  {% set count = active_timers | length %}
                  {% if count == 0 %}
                  There are no active timers.
                  {% else %}
                  There {% if count == 1 %}is one active timer called {% else %}are {{ count }} active timers{% endif %}:<br /\><br /\>
                  {% for timer in active_timers %}
                    {{ timer['name'] | capitalize if timer['name'] else timer['extra_info']['sentence'] }} timer with {{ timer['expiry']['text'] }} remaining<br /\><br /\>
                  {% endfor %}
                  {% endif %}                 
            - action: view_assist.set_state
              target:
                entity_id: '{{ target_satellite_device }}'
              data:
                title: "Timers"
                message: "{{ message }}"
                message_font_size: 3vw 
            - action: view_assist.navigate
              data:
                device: "{{ target_satellite_device }}"
                path: "info"                
      - conditions:
          - condition: trigger
            id:
              - snoozealarm
        sequence:
          - variables:
              target_satellite_device: "{{ trigger.event.data.entity_id }}"
              target_display_device: >-
                {{ device_id(state_attr(target_satellite_device,
                'display_device')) }}
              target_mediaplayer_device: "{{ state_attr(target_satellite_device, 'mediaplayer_device') }}"
              new_time: "{{ (now() + timedelta(minutes=snooze_time)).strftime('%H:%M:%S') }}"
          - action: view_assist.set_state
            target:
              entity_id: '{{ target_satellite_device }}'
            data:
              alarm: rescheduled
              mode: normal
          - action: view_assist.cancel_sound_alarm
            data:
              entity_id: "{{ target_mediaplayer_device }}"
          - action: view_assist.set_timer
            data:
              device_id: "{{ device_id(trigger.event.data.mic_device) }}"
              type: "alarm"
              time: "{{ new_time }}"
              name: "Snoozed Alarm"
            response_variable: timer_result               
          - set_conversation_response: ""
mode: parallel