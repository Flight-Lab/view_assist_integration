blueprint:
  name: View Assist - List Management
  description: Ask "Show/Add/Remove from list" and ViewAssist will respond by saying
    what action was taken and show the list (View Assist listmanagement v 1.1.1)
  domain: automation
  input:
    command_add1:
      name: Command Text Add 1
      description: The first phrase you want to use to trigger adding to the list
      default: add {item} to [my | the][grocery|shopping] list
    command_remove1:
      name: Command Text Remove 1
      description: The first phrase you want to use to trigger removing from the list
      default: remove {item} from [my | the][grocery|shopping] list
    command_remove2:
      name: Command Text Remove 2
      description: The second phrase you want to use to trigger removing from the
        list (can not be blank)
      default: take {item} off [my | the] [grocery|shopping] list
    command_show1:
      name: Command Text Show 1
      description: The first phrase you want to use to trigger showing the list
      default: (what's | what is) on [my| the] [grocery|shopping] list
    command_show2:
      name: Command Text Show 2
      description: The second phrase you want to use to trigger showing the list (can
        not be blank)
      default: show [me] [my| the] [grocery|shopping] list
    view:
      name: Dashboard List view
      description: The View Assist dashboard view designed to show lists (example
        /view-assist/list)
      default: /view-assist/list
    list_entity:
      name: Todo List
      description: The Home Assistant todo list to use (example todo.shopping_list)
      default: todo.shopping_list
  source_url: https://raw.githubusercontent.com/dinki/View-Assist/main/View%20Assist%20custom%20sentences/List%20Management/blueprint-listmanagement.yaml
alias: View Assist - List Management
description: ''
trigger:
- platform: conversation
  command:
  - !input command_add1
  id: add_item
- platform: conversation
  command:
  - !input command_remove1
  - !input command_remove2
  id: remove_item
- platform: conversation
  command:
  - !input command_show1
  - !input command_show2
  id: list_list
action:
- action: view_assist.get_target_satellite
  data:
    device_id: "{{ trigger.device_id }}"
  response_variable: target_satellite
- variables:
    list_entity: !input list_entity
    view: !input view
    target_satellite_device: "{{ target_satellite.target_satellite[0] }}"
    target_display_device: '{{ device_id(state_attr(target_satellite_device, ''display_device''))}}'
    target_mediaplayer_device: '{{ state_attr(target_satellite_device, ''mediaplayer_device'')}}'
    target_satellite_device_type: '{{ state_attr(target_satellite_device, ''type'')}}'
- choose:
  - conditions:
    - condition: trigger
      id: add_item
    sequence:
    - service: todo.get_items
      data:
        entity_id: '{{ list_entity }}'
        status: needs_action
      response_variable: list_items
    - if:
      - condition: template
        value_template: '{{ trigger.slots.item | lower in (list_items[list_entity]["items"]
          | map(attribute=''summary'') | map(''lower'')| list)}} '
      then:
      - set_conversation_response: '{{ trigger.slots.item }} is already in your {{
          state_attr(list_entity,''friendly_name'') }}'
        enabled: true
      else:
      - service: todo.add_item
        data:
          item: '{{trigger.slots.item | title}}'
        target:
          entity_id: '{{ list_entity }}'
      - set_conversation_response: '{{ trigger.slots.item }} added to your {{ state_attr(list_entity,''friendly_name'')
          }}'
        enabled: true
    - if:
      - condition: template
        value_template: '{% if target_satellite_device_type != ''audio_only'' %}true{%
          else %}false{% endif %}'
      then:
        - action: view_assist.set_state
          target:
            entity_id: '{{ target_satellite_device }}'
          data:
            title: '{{ state_attr(list_entity,''friendly_name'') }}'
            message_font_size: 4vw
            list: '{{ list_entity }}'  
        - action: view_assist.navigate    
          data:
            device: "{{ target_satellite_device }}"
            display_type: "{{ target_display_type }}"
            path: '{{ view }}'
  - conditions:
    - condition: trigger
      id: remove_item
    sequence:
    - service: todo.get_items
      data:
        entity_id: '{{ list_entity }}'
        status: needs_action
      response_variable: list_items
    - if:
      - condition: template
        value_template: '{{ trigger.slots.item | lower in (list_items[list_entity]["items"]
          | map(attribute=''summary'') | map(''lower'')| list) }}'
      then:
      - service: todo.remove_item
        data:
          item: '{{list_items[list_entity]["items"] | map(attribute=''summary'') |
            list | select(''search'', trigger.slots.item, ignorecase=true) | list
            | first | default }}'
        target:
          entity_id: '{{ list_entity }}'
      - set_conversation_response: '{{ trigger.slots.item }} removed from {{ state_attr(list_entity,''friendly_name'')}}'
        enabled: true
      else:
      - set_conversation_response: '{{ trigger.slots.item }} is not in {{ state_attr(list_entity,''friendly_name'')}}'
        enabled: true
    - if:
      - condition: template
        value_template: '{% if target_satellite_device_type != ''audio_only'' %}true{%
          else %}false{% endif %}'
      then:
      - service: python_script.set_state
        data:
          entity_id: '{{ target_satellite_device }}'
          title: '{{ state_attr(list_entity,''friendly_name'') }}'
          message_font_size: 4vw
          list: '{{ list_entity }}'
        enabled: true
      - service: browser_mod.navigate
        data:
          path: '{{ view }}'
        target:
          device_id: '{{ target_display_device }}'
  default:
  - sequence:
    - service: todo.get_items
      data:
        entity_id: '{{ list_entity }}'
        status: needs_action
      response_variable: list_items
    - set_conversation_response: "{% if int(states(list_entity)) == 0 %}\n  There
        are no unchecked items on your  {{ state_attr(list_entity,'friendly_name')
        }}\n{% elif int(states(list_entity)) == 1 %}\n  There is 1 unchecked item
        on your {{ state_attr(list_entity,'friendly_name') }} \n  It is {{ list_items[list_entity][\"items\"][0].summary
        }}\n{% else %}\n  There are {{ states(list_entity) }} items on your {{ state_attr(list_entity,'friendly_name')
        }}\n  They are \n    {{ list_items[list_entity][\"items\"] | map(attribute='summary')
        | list | join(', ') }}\n{% endif %}\n"
      enabled: true
    - if:
      - condition: template
        value_template: '{% if target_satellite_device_type != ''audio_only'' %}true{%
          else %}false{% endif %}'
      then:
      - service: python_script.set_state
        data:
          entity_id: '{{ target_satellite_device }}'
          title: '{{ state_attr(list_entity,''friendly_name'') }}'
          message_font_size: 4vw
          list: '{{ list_entity }}'
        enabled: true
      - service: browser_mod.navigate
        data:
          path: '{{ view }}'
        target:
          device_id: '{{ target_display_device }}'
mode: single
